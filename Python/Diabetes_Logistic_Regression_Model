{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 189,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"C:/Users/nneam/OneDrive/Documents/540Assignments/Diabetes_Classification.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Cholesterol</th>\n",
       "      <th>Glucose</th>\n",
       "      <th>HDL Chol</th>\n",
       "      <th>Chol/HDL ratio</th>\n",
       "      <th>Age</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Height</th>\n",
       "      <th>Weight</th>\n",
       "      <th>BMI</th>\n",
       "      <th>Systolic BP</th>\n",
       "      <th>Diastolic BP</th>\n",
       "      <th>waist</th>\n",
       "      <th>hip</th>\n",
       "      <th>Waist/hip ratio</th>\n",
       "      <th>Diabetes</th>\n",
       "      <th>Unnamed: 16</th>\n",
       "      <th>Unnamed: 17</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>193</td>\n",
       "      <td>77</td>\n",
       "      <td>49</td>\n",
       "      <td>3.9</td>\n",
       "      <td>19</td>\n",
       "      <td>female</td>\n",
       "      <td>61</td>\n",
       "      <td>119</td>\n",
       "      <td>22.5</td>\n",
       "      <td>118</td>\n",
       "      <td>70</td>\n",
       "      <td>32</td>\n",
       "      <td>38</td>\n",
       "      <td>0.84</td>\n",
       "      <td>No diabetes</td>\n",
       "      <td>6.0</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>146</td>\n",
       "      <td>79</td>\n",
       "      <td>41</td>\n",
       "      <td>3.6</td>\n",
       "      <td>19</td>\n",
       "      <td>female</td>\n",
       "      <td>60</td>\n",
       "      <td>135</td>\n",
       "      <td>26.4</td>\n",
       "      <td>108</td>\n",
       "      <td>58</td>\n",
       "      <td>33</td>\n",
       "      <td>40</td>\n",
       "      <td>0.83</td>\n",
       "      <td>No diabetes</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>217</td>\n",
       "      <td>75</td>\n",
       "      <td>54</td>\n",
       "      <td>4.0</td>\n",
       "      <td>20</td>\n",
       "      <td>female</td>\n",
       "      <td>67</td>\n",
       "      <td>187</td>\n",
       "      <td>29.3</td>\n",
       "      <td>110</td>\n",
       "      <td>72</td>\n",
       "      <td>40</td>\n",
       "      <td>45</td>\n",
       "      <td>0.89</td>\n",
       "      <td>No diabetes</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>226</td>\n",
       "      <td>97</td>\n",
       "      <td>70</td>\n",
       "      <td>3.2</td>\n",
       "      <td>20</td>\n",
       "      <td>female</td>\n",
       "      <td>64</td>\n",
       "      <td>114</td>\n",
       "      <td>19.6</td>\n",
       "      <td>122</td>\n",
       "      <td>64</td>\n",
       "      <td>31</td>\n",
       "      <td>39</td>\n",
       "      <td>0.79</td>\n",
       "      <td>No diabetes</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>164</td>\n",
       "      <td>91</td>\n",
       "      <td>67</td>\n",
       "      <td>2.4</td>\n",
       "      <td>20</td>\n",
       "      <td>female</td>\n",
       "      <td>70</td>\n",
       "      <td>141</td>\n",
       "      <td>20.2</td>\n",
       "      <td>122</td>\n",
       "      <td>86</td>\n",
       "      <td>32</td>\n",
       "      <td>39</td>\n",
       "      <td>0.82</td>\n",
       "      <td>No diabetes</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id  Cholesterol  Glucose  HDL Chol  Chol/HDL ratio  Age  Gender  Height  \\\n",
       "0   1          193       77        49             3.9   19  female      61   \n",
       "1   2          146       79        41             3.6   19  female      60   \n",
       "2   3          217       75        54             4.0   20  female      67   \n",
       "3   4          226       97        70             3.2   20  female      64   \n",
       "4   5          164       91        67             2.4   20  female      70   \n",
       "\n",
       "   Weight   BMI  Systolic BP  Diastolic BP  waist  hip  Waist/hip ratio  \\\n",
       "0     119  22.5          118            70     32   38             0.84   \n",
       "1     135  26.4          108            58     33   40             0.83   \n",
       "2     187  29.3          110            72     40   45             0.89   \n",
       "3     114  19.6          122            64     31   39             0.79   \n",
       "4     141  20.2          122            86     32   39             0.82   \n",
       "\n",
       "      Diabetes  Unnamed: 16  Unnamed: 17  \n",
       "0  No diabetes          6.0          6.0  \n",
       "1  No diabetes          NaN          NaN  \n",
       "2  No diabetes          NaN          NaN  \n",
       "3  No diabetes          NaN          NaN  \n",
       "4  No diabetes          NaN          NaN  "
      ]
     },
     "execution_count": 191,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Dropping unneccesary columns\n",
    "df2 = df.drop(columns=['Unnamed: 16', 'Unnamed: 17'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Cholesterol</th>\n",
       "      <th>Glucose</th>\n",
       "      <th>HDL Chol</th>\n",
       "      <th>Chol/HDL ratio</th>\n",
       "      <th>Age</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Height</th>\n",
       "      <th>Weight</th>\n",
       "      <th>BMI</th>\n",
       "      <th>Systolic BP</th>\n",
       "      <th>Diastolic BP</th>\n",
       "      <th>waist</th>\n",
       "      <th>hip</th>\n",
       "      <th>Waist/hip ratio</th>\n",
       "      <th>Diabetes</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>193</td>\n",
       "      <td>77</td>\n",
       "      <td>49</td>\n",
       "      <td>3.9</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>61</td>\n",
       "      <td>119</td>\n",
       "      <td>22.5</td>\n",
       "      <td>118</td>\n",
       "      <td>70</td>\n",
       "      <td>32</td>\n",
       "      <td>38</td>\n",
       "      <td>0.84</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>146</td>\n",
       "      <td>79</td>\n",
       "      <td>41</td>\n",
       "      <td>3.6</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>135</td>\n",
       "      <td>26.4</td>\n",
       "      <td>108</td>\n",
       "      <td>58</td>\n",
       "      <td>33</td>\n",
       "      <td>40</td>\n",
       "      <td>0.83</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>217</td>\n",
       "      <td>75</td>\n",
       "      <td>54</td>\n",
       "      <td>4.0</td>\n",
       "      <td>20</td>\n",
       "      <td>0</td>\n",
       "      <td>67</td>\n",
       "      <td>187</td>\n",
       "      <td>29.3</td>\n",
       "      <td>110</td>\n",
       "      <td>72</td>\n",
       "      <td>40</td>\n",
       "      <td>45</td>\n",
       "      <td>0.89</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>226</td>\n",
       "      <td>97</td>\n",
       "      <td>70</td>\n",
       "      <td>3.2</td>\n",
       "      <td>20</td>\n",
       "      <td>0</td>\n",
       "      <td>64</td>\n",
       "      <td>114</td>\n",
       "      <td>19.6</td>\n",
       "      <td>122</td>\n",
       "      <td>64</td>\n",
       "      <td>31</td>\n",
       "      <td>39</td>\n",
       "      <td>0.79</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>164</td>\n",
       "      <td>91</td>\n",
       "      <td>67</td>\n",
       "      <td>2.4</td>\n",
       "      <td>20</td>\n",
       "      <td>0</td>\n",
       "      <td>70</td>\n",
       "      <td>141</td>\n",
       "      <td>20.2</td>\n",
       "      <td>122</td>\n",
       "      <td>86</td>\n",
       "      <td>32</td>\n",
       "      <td>39</td>\n",
       "      <td>0.82</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   id  Cholesterol  Glucose  HDL Chol  Chol/HDL ratio  Age Gender  Height  \\\n",
       "0   1          193       77        49             3.9   19      0      61   \n",
       "1   2          146       79        41             3.6   19      0      60   \n",
       "2   3          217       75        54             4.0   20      0      67   \n",
       "3   4          226       97        70             3.2   20      0      64   \n",
       "4   5          164       91        67             2.4   20      0      70   \n",
       "\n",
       "   Weight   BMI  Systolic BP  Diastolic BP  waist  hip  Waist/hip ratio  \\\n",
       "0     119  22.5          118            70     32   38             0.84   \n",
       "1     135  26.4          108            58     33   40             0.83   \n",
       "2     187  29.3          110            72     40   45             0.89   \n",
       "3     114  19.6          122            64     31   39             0.79   \n",
       "4     141  20.2          122            86     32   39             0.82   \n",
       "\n",
       "  Diabetes  \n",
       "0        0  \n",
       "1        0  \n",
       "2        0  \n",
       "3        0  \n",
       "4        0  "
      ]
     },
     "execution_count": 193,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Replcing diabetes and gender column value for model\n",
    "df2['Diabetes'] = df2['Diabetes'].replace(['No diabetes','Diabetes'],['0','1'])\n",
    "df2['Gender'] = df2['Gender'].replace(['female','male'],['0','1'])\n",
    "df2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Loading Libraries\n",
    "import matplotlib.pyplot as plt \n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## EDA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    330\n",
       "1     60\n",
       "Name: Diabetes, dtype: int64"
      ]
     },
     "execution_count": 195,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Counting Diabetes Coulumn Values\n",
    "df2['Diabetes'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Visualizing\n",
    "sns.countplot(x='Diabetes', data = df2)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>Cholesterol</th>\n",
       "      <th>Glucose</th>\n",
       "      <th>HDL Chol</th>\n",
       "      <th>Chol/HDL ratio</th>\n",
       "      <th>Age</th>\n",
       "      <th>Height</th>\n",
       "      <th>Weight</th>\n",
       "      <th>BMI</th>\n",
       "      <th>Systolic BP</th>\n",
       "      <th>Diastolic BP</th>\n",
       "      <th>waist</th>\n",
       "      <th>hip</th>\n",
       "      <th>Waist/hip ratio</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gender</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>186.942982</td>\n",
       "      <td>208.364035</td>\n",
       "      <td>103.109649</td>\n",
       "      <td>51.842105</td>\n",
       "      <td>4.374123</td>\n",
       "      <td>45.609649</td>\n",
       "      <td>63.714912</td>\n",
       "      <td>174.276316</td>\n",
       "      <td>30.188158</td>\n",
       "      <td>136.451754</td>\n",
       "      <td>82.482456</td>\n",
       "      <td>38.092105</td>\n",
       "      <td>44.289474</td>\n",
       "      <td>0.860044</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>207.543210</td>\n",
       "      <td>205.635802</td>\n",
       "      <td>113.290123</td>\n",
       "      <td>48.049383</td>\n",
       "      <td>4.736420</td>\n",
       "      <td>48.413580</td>\n",
       "      <td>69.098765</td>\n",
       "      <td>181.814815</td>\n",
       "      <td>26.787654</td>\n",
       "      <td>138.092593</td>\n",
       "      <td>84.425926</td>\n",
       "      <td>37.555556</td>\n",
       "      <td>41.166667</td>\n",
       "      <td>0.911420</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                id  Cholesterol     Glucose   HDL Chol  Chol/HDL ratio  \\\n",
       "Gender                                                                   \n",
       "0       186.942982   208.364035  103.109649  51.842105        4.374123   \n",
       "1       207.543210   205.635802  113.290123  48.049383        4.736420   \n",
       "\n",
       "              Age     Height      Weight        BMI  Systolic BP  \\\n",
       "Gender                                                             \n",
       "0       45.609649  63.714912  174.276316  30.188158   136.451754   \n",
       "1       48.413580  69.098765  181.814815  26.787654   138.092593   \n",
       "\n",
       "        Diastolic BP      waist        hip  Waist/hip ratio  \n",
       "Gender                                                       \n",
       "0          82.482456  38.092105  44.289474         0.860044  \n",
       "1          84.425926  37.555556  41.166667         0.911420  "
      ]
     },
     "execution_count": 197,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Analyzing data by gender\n",
    "df2.groupby('Gender').mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Frequency of Diabetes')"
      ]
     },
     "execution_count": 198,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Visualizing\n",
    "%matplotlib inline\n",
    "pd.crosstab(df2.Gender,df2.Diabetes).plot(kind='bar')\n",
    "plt.title('Diabetes')\n",
    "plt.xlabel('Gender')\n",
    "plt.ylabel('Frequency of Diabetes')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Histogram of Height')"
      ]
     },
     "execution_count": 199,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Histogram for Height\n",
    "df2.Height.hist()\n",
    "plt.title('Histogram of Height')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model Creation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 390 entries, 0 to 389\n",
      "Data columns (total 16 columns):\n",
      " #   Column           Non-Null Count  Dtype  \n",
      "---  ------           --------------  -----  \n",
      " 0   id               390 non-null    int64  \n",
      " 1   Cholesterol      390 non-null    int64  \n",
      " 2   Glucose          390 non-null    int64  \n",
      " 3   HDL Chol         390 non-null    int64  \n",
      " 4   Chol/HDL ratio   390 non-null    float64\n",
      " 5   Age              390 non-null    int64  \n",
      " 6   Gender           390 non-null    object \n",
      " 7   Height           390 non-null    int64  \n",
      " 8   Weight           390 non-null    int64  \n",
      " 9   BMI              390 non-null    float64\n",
      " 10  Systolic BP      390 non-null    int64  \n",
      " 11  Diastolic BP     390 non-null    int64  \n",
      " 12  waist            390 non-null    int64  \n",
      " 13  hip              390 non-null    int64  \n",
      " 14  Waist/hip ratio  390 non-null    float64\n",
      " 15  Diabetes         390 non-null    object \n",
      "dtypes: float64(3), int64(11), object(2)\n",
      "memory usage: 48.9+ KB\n"
     ]
    }
   ],
   "source": [
    "#Analyzing data types\n",
    "df2.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Changing value type\n",
    "df2['Diabetes'] = df2.Diabetes.astype(int)\n",
    "df2['Gender'] = df2.Gender.astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 390 entries, 0 to 389\n",
      "Data columns (total 16 columns):\n",
      " #   Column           Non-Null Count  Dtype  \n",
      "---  ------           --------------  -----  \n",
      " 0   id               390 non-null    int64  \n",
      " 1   Cholesterol      390 non-null    int64  \n",
      " 2   Glucose          390 non-null    int64  \n",
      " 3   HDL Chol         390 non-null    int64  \n",
      " 4   Chol/HDL ratio   390 non-null    float64\n",
      " 5   Age              390 non-null    int64  \n",
      " 6   Gender           390 non-null    int32  \n",
      " 7   Height           390 non-null    int64  \n",
      " 8   Weight           390 non-null    int64  \n",
      " 9   BMI              390 non-null    float64\n",
      " 10  Systolic BP      390 non-null    int64  \n",
      " 11  Diastolic BP     390 non-null    int64  \n",
      " 12  waist            390 non-null    int64  \n",
      " 13  hip              390 non-null    int64  \n",
      " 14  Waist/hip ratio  390 non-null    float64\n",
      " 15  Diabetes         390 non-null    int32  \n",
      "dtypes: float64(3), int32(2), int64(11)\n",
      "memory usage: 45.8 KB\n"
     ]
    }
   ],
   "source": [
    "#Verifying change\n",
    "df2.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Creating the Test, Train, and Split\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(df2.drop('Diabetes',axis=1), df2['Diabetes'], test_size=0.30, random_state=200)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Training Model\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "logmodel = LogisticRegression(solver='liblinear', max_iter=200)\n",
    "logmodel.fit(X_train,y_train)\n",
    "predictions = logmodel.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.89      0.97      0.93        94\n",
      "           1       0.80      0.52      0.63        23\n",
      "\n",
      "    accuracy                           0.88       117\n",
      "   macro avg       0.85      0.74      0.78       117\n",
      "weighted avg       0.87      0.88      0.87       117\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Evaluating Model\n",
    "from sklearn.metrics import classification_report\n",
    "print(classification_report(y_test,predictions))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
